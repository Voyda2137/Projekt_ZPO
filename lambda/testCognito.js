"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_sdk_1 = require("aws-sdk");
const UserUtils_1 = require("./Utils/UserUtils");
exports.handler = async function (event) {
    const userPoolID = process.env.USER_POOL_ID || "";
    const userPoolClientId = process.env.USER_POOL_CLIENT_ID || '';
    const dynamoDBTableName = process.env.DYNAMODB_TABLE_NAME || '';
    const cognitoClient = new aws_sdk_1.CognitoIdentityServiceProvider();
    const dynamoDB = new aws_sdk_1.DynamoDB();
    try {
        if (event.username && event.email) {
            const tmpPassword = await (0, UserUtils_1.generateTmpPwd)();
            const createUserParams = {
                UserPoolId: userPoolID,
                Username: event.username,
                TemporaryPassword: tmpPassword,
                UserAttributes: [
                    { Name: 'email', Value: event.email },
                    { Name: 'given_name', Value: event.givenName },
                    { Name: 'family_name', Value: event.familyName },
                    { Name: 'preferred_username', Value: event.username }
                ]
            };
            const createUser = await cognitoClient.adminCreateUser(createUserParams).promise();
            if (createUser) {
                const dynamoDBParams = {
                    TableName: dynamoDBTableName,
                    Item: {
                        UserID: { S: createUser.User?.Username },
                        Email: { S: event.email },
                        Name: { S: event.givenName },
                        Surname: { S: event.familyName },
                    }
                };
                await dynamoDB.putItem(dynamoDBParams).promise();
            }
            return {
                statusCode: 200,
                body: JSON.stringify({
                    message: 'User created',
                    user: createUser.User
                })
            };
        }
        return {
            statusCode: 500,
            body: JSON.stringify({
                message: 'Missing attribute email'
            })
        };
    }
    catch (e) {
        console.error('Error creating user', e);
        return {
            statusCode: 500,
            body: JSON.stringify({
                error: 'Internal Server Error'
            })
        };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdENvZ25pdG8uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0ZXN0Q29nbml0by50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUFpRTtBQUVqRSxpREFBaUQ7QUFFakQsT0FBTyxDQUFDLE9BQU8sR0FBRyxLQUFLLFdBQVUsS0FBWTtJQUN6QyxNQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksSUFBSSxFQUFFLENBQUE7SUFDakQsTUFBTSxnQkFBZ0IsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixJQUFJLEVBQUUsQ0FBQTtJQUM5RCxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLElBQUksRUFBRSxDQUFBO0lBRS9ELE1BQU0sYUFBYSxHQUFHLElBQUksd0NBQThCLEVBQUUsQ0FBQTtJQUMxRCxNQUFNLFFBQVEsR0FBRyxJQUFJLGtCQUFRLEVBQUUsQ0FBQTtJQUUvQixJQUFJO1FBQ0EsSUFBRyxLQUFLLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDOUIsTUFBTSxXQUFXLEdBQUcsTUFBTSxJQUFBLDBCQUFjLEdBQUUsQ0FBQTtZQUMxQyxNQUFNLGdCQUFnQixHQUFnRTtnQkFDbEYsVUFBVSxFQUFFLFVBQVU7Z0JBQ3RCLFFBQVEsRUFBRSxLQUFLLENBQUMsUUFBUTtnQkFDeEIsaUJBQWlCLEVBQUUsV0FBVztnQkFDOUIsY0FBYyxFQUFFO29CQUNaLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBQztvQkFDbkMsRUFBQyxJQUFJLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsU0FBUyxFQUFDO29CQUM1QyxFQUFDLElBQUksRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUM7b0JBQzlDLEVBQUMsSUFBSSxFQUFFLG9CQUFvQixFQUFFLEtBQUssRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFDO2lCQUN0RDthQUNKLENBQUE7WUFDRCxNQUFNLFVBQVUsR0FBRyxNQUFNLGFBQWEsQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQTtZQUNsRixJQUFHLFVBQVUsRUFBQztnQkFFVixNQUFNLGNBQWMsR0FBZ0M7b0JBQ2hELFNBQVMsRUFBRSxpQkFBaUI7b0JBQzVCLElBQUksRUFBRTt3QkFDRixNQUFNLEVBQUUsRUFBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUM7d0JBQ3RDLEtBQUssRUFBRSxFQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFDO3dCQUN2QixJQUFJLEVBQUUsRUFBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLFNBQVMsRUFBQzt3QkFDMUIsT0FBTyxFQUFFLEVBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUM7cUJBQ2pDO2lCQUNKLENBQUE7Z0JBRUQsTUFBTSxRQUFRLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFBO2FBQ25EO1lBRUQsT0FBTztnQkFDSCxVQUFVLEVBQUUsR0FBRztnQkFDZixJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQztvQkFDakIsT0FBTyxFQUFFLGNBQWM7b0JBQ3ZCLElBQUksRUFBRSxVQUFVLENBQUMsSUFBSTtpQkFDeEIsQ0FBQzthQUNMLENBQUE7U0FDSjtRQUNELE9BQU87WUFDSCxVQUFVLEVBQUUsR0FBRztZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUNqQixPQUFPLEVBQUUseUJBQXlCO2FBQ3JDLENBQUM7U0FDTCxDQUFBO0tBQ0o7SUFDRCxPQUFPLENBQUMsRUFBRTtRQUNOLE9BQU8sQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFFdkMsT0FBTztZQUNILFVBQVUsRUFBRSxHQUFHO1lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ2pCLEtBQUssRUFBRSx1QkFBdUI7YUFDakMsQ0FBQztTQUNMLENBQUE7S0FDSjtBQUVMLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29nbml0b0lkZW50aXR5U2VydmljZVByb3ZpZGVyLCBEeW5hbW9EQn0gZnJvbSAnYXdzLXNkayc7XHJcbmltcG9ydCB7SVVzZXJ9IGZyb20gXCIuLi9JbnRlcmZhY2VzL0lVc2VyXCI7XHJcbmltcG9ydCB7Z2VuZXJhdGVUbXBQd2R9IGZyb20gXCIuL1V0aWxzL1VzZXJVdGlsc1wiO1xyXG5cclxuZXhwb3J0cy5oYW5kbGVyID0gYXN5bmMgZnVuY3Rpb24oZXZlbnQ6IElVc2VyKSB7XHJcbiAgICBjb25zdCB1c2VyUG9vbElEID0gcHJvY2Vzcy5lbnYuVVNFUl9QT09MX0lEIHx8IFwiXCJcclxuICAgIGNvbnN0IHVzZXJQb29sQ2xpZW50SWQgPSBwcm9jZXNzLmVudi5VU0VSX1BPT0xfQ0xJRU5UX0lEIHx8ICcnXHJcbiAgICBjb25zdCBkeW5hbW9EQlRhYmxlTmFtZSA9IHByb2Nlc3MuZW52LkRZTkFNT0RCX1RBQkxFX05BTUUgfHwgJydcclxuXHJcbiAgICBjb25zdCBjb2duaXRvQ2xpZW50ID0gbmV3IENvZ25pdG9JZGVudGl0eVNlcnZpY2VQcm92aWRlcigpXHJcbiAgICBjb25zdCBkeW5hbW9EQiA9IG5ldyBEeW5hbW9EQigpXHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgICBpZihldmVudC51c2VybmFtZSAmJiBldmVudC5lbWFpbCkge1xyXG4gICAgICAgICAgICBjb25zdCB0bXBQYXNzd29yZCA9IGF3YWl0IGdlbmVyYXRlVG1wUHdkKClcclxuICAgICAgICAgICAgY29uc3QgY3JlYXRlVXNlclBhcmFtczogQ29nbml0b0lkZW50aXR5U2VydmljZVByb3ZpZGVyLlR5cGVzLkFkbWluQ3JlYXRlVXNlclJlcXVlc3QgPSB7XHJcbiAgICAgICAgICAgICAgICBVc2VyUG9vbElkOiB1c2VyUG9vbElELFxyXG4gICAgICAgICAgICAgICAgVXNlcm5hbWU6IGV2ZW50LnVzZXJuYW1lLFxyXG4gICAgICAgICAgICAgICAgVGVtcG9yYXJ5UGFzc3dvcmQ6IHRtcFBhc3N3b3JkLFxyXG4gICAgICAgICAgICAgICAgVXNlckF0dHJpYnV0ZXM6IFtcclxuICAgICAgICAgICAgICAgICAgICB7TmFtZTogJ2VtYWlsJywgVmFsdWU6IGV2ZW50LmVtYWlsfSxcclxuICAgICAgICAgICAgICAgICAgICB7TmFtZTogJ2dpdmVuX25hbWUnLCBWYWx1ZTogZXZlbnQuZ2l2ZW5OYW1lfSxcclxuICAgICAgICAgICAgICAgICAgICB7TmFtZTogJ2ZhbWlseV9uYW1lJywgVmFsdWU6IGV2ZW50LmZhbWlseU5hbWV9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtOYW1lOiAncHJlZmVycmVkX3VzZXJuYW1lJywgVmFsdWU6IGV2ZW50LnVzZXJuYW1lfVxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGNyZWF0ZVVzZXIgPSBhd2FpdCBjb2duaXRvQ2xpZW50LmFkbWluQ3JlYXRlVXNlcihjcmVhdGVVc2VyUGFyYW1zKS5wcm9taXNlKClcclxuICAgICAgICAgICAgaWYoY3JlYXRlVXNlcil7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZHluYW1vREJQYXJhbXM6IER5bmFtb0RCLlR5cGVzLlB1dEl0ZW1JbnB1dCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBUYWJsZU5hbWU6IGR5bmFtb0RCVGFibGVOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIEl0ZW06IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVXNlcklEOiB7UzogY3JlYXRlVXNlci5Vc2VyPy5Vc2VybmFtZX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEVtYWlsOiB7UzogZXZlbnQuZW1haWx9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBOYW1lOiB7UzogZXZlbnQuZ2l2ZW5OYW1lfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgU3VybmFtZToge1M6IGV2ZW50LmZhbWlseU5hbWV9LFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBhd2FpdCBkeW5hbW9EQi5wdXRJdGVtKGR5bmFtb0RCUGFyYW1zKS5wcm9taXNlKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHN0YXR1c0NvZGU6IDIwMCxcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnVXNlciBjcmVhdGVkJyxcclxuICAgICAgICAgICAgICAgICAgICB1c2VyOiBjcmVhdGVVc2VyLlVzZXJcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3RhdHVzQ29kZTogNTAwLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiAnTWlzc2luZyBhdHRyaWJ1dGUgZW1haWwnXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjcmVhdGluZyB1c2VyJywgZSlcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3RhdHVzQ29kZTogNTAwLFxyXG4gICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XHJcbiAgICAgICAgICAgICAgICBlcnJvcjogJ0ludGVybmFsIFNlcnZlciBFcnJvcidcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59Il19